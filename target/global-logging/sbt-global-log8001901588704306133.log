[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\goura\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\goura\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Oracle Corporation Java 11.0.17)
[debug]       Load.loadUnit: plugins took 194.0018ms
[debug]       Load.loadUnit: defsScala took 0.4141ms
[debug] [Loading] Scanning directory C:\Users\goura\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\goura\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.6846 ms
[debug]           Load.resolveProject(global-plugins) took 56.457ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\goura\.sbt\1.0\plugins, plugins: List(<none>))) took 125.8837ms
[debug] [Loading] Done in C:\Users\goura\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 158.3766ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2444ms
[debug]     Load.loadUnit(file:/C:/Users/goura/.sbt/1.0/plugins/, ...) took 365.7687ms
[debug]   Load.apply: load took 593.0948ms
[debug]   Load.apply: resolveProjects took 7.5609ms
[debug]   Load.apply: finalTransforms took 82.3897ms
[debug]   Load.apply: config.delegates took 8.7612ms
[debug]   Load.apply: Def.make(settings)... took 483.4457ms
[debug]   Load.apply: structureIndex took 108.3845ms
[debug]   Load.apply: mkStreams took 1.4747ms
[info] loading global plugins from C:\Users\goura\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2901.7242ms
[debug]           Load.loadUnit: plugins took 23.9944ms
[debug]           Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli\project
[debug]             Load.loadUnit: mkEval took 10.1778ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.9034 ms
[info] loading settings for project humidity_sensor_data_cli-build from idea.sbt ...
[debug]               Load.resolveProject(humidity_sensor_data_cli-build) took 4.4846ms
[debug]             Load.loadTransitive: finalizeProject(Project(id humidity_sensor_data_cli-build, base: C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli\project, plugins: List(<none>))) took 8.2283ms
[debug] [Loading] Done in C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli\project, returning: (humidity_sensor_data_cli-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2517.6131ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.7469ms
[debug]         Load.loadUnit(file:/C:/Users/goura/rockTheJVM/spark-optimization_main/Humidity_Sensor_Data_Cli/project/, ...) took 2548.4921ms
[debug]       Load.apply: load took 2550.6981ms
[debug]       Load.apply: resolveProjects took 0.1221ms
[debug]       Load.apply: finalTransforms took 13.9666ms
[debug]       Load.apply: config.delegates took 0.5788ms
[debug]       Load.apply: Def.make(settings)... took 99.6663ms
[debug]       Load.apply: structureIndex took 30.7429ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4393.7845ms
[debug]     Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli
[debug]       Load.loadUnit: mkEval took 0.8825ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7349 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 35.1349ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli, plugins: List(<none>))) took 38.5529ms
[debug] [Loading] Done in C:\Users\goura\rockTheJVM\spark-optimization_main\Humidity_Sensor_Data_Cli, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2346.2613ms
[debug]     Load.loadUnit: cleanEvalClasses took 42.1705ms
[debug]   Load.loadUnit(file:/C:/Users/goura/rockTheJVM/spark-optimization_main/Humidity_Sensor_Data_Cli/, ...) took 6782.914ms
[debug] Load.apply: load took 6784.7258ms
[debug] Load.apply: resolveProjects took 0.1677ms
[debug] Load.apply: finalTransforms took 37.0985ms
[debug] Load.apply: config.delegates took 0.3548ms
[debug] Load.apply: Def.make(settings)... took 91.7956ms
[debug] Load.apply: structureIndex took 28.7751ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to Humidity_Sensor_Data_Cli (in build file:/C:/Users/goura/rockTheJVM/spark-optimization_main/Humidity_Sensor_Data_Cli/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63641 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63641, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Humidity_Sensor_Data_Cli (in build file:/C:/Users/goura/rockTheJVM/spark-optimization_main/Humidity_Sensor_Data_Cli/)
[debug] > Exec(idea-shell, None, None)
